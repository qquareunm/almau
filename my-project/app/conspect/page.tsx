import Image from "next/image";
import img1 from "../../public/image.png";
import img2 from "../../public/img2.png";
import img3 from "../../public/img3.png";
import img4 from "../../public/img4.png";
import img5 from "../../public/img5.png";
import img6 from "../../public/img6.png";
import img7 from "../../public/img7.png";
import img8 from "../../public/img8.png";
import img9 from "../../public/img9.png";
import img10 from "../../public/img10.png";
import img11 from "../../public/img11.png";
import img12 from "../../public/img12.png";
import img13 from "../../public/img13.png";
import img15 from "../../public/img15.png";
import img14 from "../../public/img14.png";
import img16 from "../../public/img16.png";
import img17 from "../../public/img17.png";
import img18 from "../../public/img18.png";
import img19 from "../../public/img19.png";
import img20 from "../../public/img20.png";
import img21 from "../../public/img21.png";
import img22 from "../../public/img22.png";
import img23 from "../../public/img23.png";
import img24 from "../../public/img24.png";
import img25 from "../../public/img25.png";
import img26 from "../../public/img26.png";
import img27 from "../../public/img27.png";
import img28 from "../../public/img28.png";
import img29 from "../../public/img29.png";
import img30 from "../../public/img30.png";
import img31 from "../../public/img31.png";
import img32 from "../../public/img32.png";
import img33 from "../../public/img33.png";
import img34 from "../../public/img34.png";
import img35 from "../../public/img35.png";
import img36 from "../../public/img36.png";
import img37 from "../../public/img37.png";
import img38 from "../../public/img38.png";
import img39 from "../../public/img39.png";
import img40 from "../../public/img40.png";
import img41 from "../../public/img41.png";
import img42 from "../../public/img42.png";
import img43 from "../../public/img43.png";
import img44 from "../../public/img44.png";
import img45 from "../../public/img45.png";
import img46 from "../../public/img46.png";
import img47 from "../../public/img47.png";
import img48 from "../../public/img48.png";
import img49 from "../../public/img49.png";
import img50 from "../../public/img50.png";
const Conspect = () => {
  return (
    <section className="md:text2xl px-[5px] text-left text-base font-medium md:container xl:container md:text-center xl:text-center xl:text-2xl">
      <h1 className="mb-14 rounded-[30px] bg-red-600 py-4 text-base text-white md:text-4xl xl:text-5xl">
        Что такое HTML, CSS и JavaScript
      </h1>
      <p className="mb-14">
        HTML, CSS и JavaScript — это три основных технологии, используемые для
        создания веб-страниц. В этой статье мы познакомимся с ними и узнаем, как
        они взаимодействуют
      </p>
      <Image
        src={img1}
        alt="foto"
        width={882}
        height={359}
        className="mx-auto mb-14"
      />

      <p className=" mb-16 rounded-[20px] bg-blue-600 py-8 text-white">
        HTML, CSS и JavaScript — это три основных технологии, используемые для
        создания веб-страниц. В этой статье мы познакомимся с ними и узнаем, как
        они взаимодействуют друг с другом. ✨
      </p>
      <h2 className="mb-14 text-base font-bold text-red-600 md:text-4xl xl:text-5xl">
        HTML (HyperText Markup Language)
      </h2>
      <p className="mb-14">
        HTML — это язык разметки, который используется для создания структуры
        веб-страниц. Он состоит из тегов, которые обозначают различные элементы
        страницы, такие как заголовки, абзацы, списки, ссылки и множество других
        элементов.
      </p>
      <Image
        src={img2}
        alt="foto"
        width={882}
        height={359}
        className="mx-auto mb-14"
      />
      <p className="mb-14" id="conspection">
        Каждый день мы посещаем множество сайтов в интернете — от поисковиков
        до соцсетей. Хотя тематика, наполнение и дизайн этих сайтов могут быть
        совершенно разными, есть одна вещь, которая их объединяет — инструмент,
        с помощью которого они созданы. Давайте познакомимся с ним поближе.
      </p>
      <h2 className="mb-14 border-2 border-solid border-black py-4 text-base font-bold text-blued md:text-4xl xl:text-5xl">
        Введение в HTML
      </h2>
      <p className="mb-8 font-bold">
        Основной принцип языка разметки HTML состоит в превращении команд в
        визуальные объекты, которые отображаются в браузере.
      </p>
      <p className="mb-14">
        Для создания заголовков применяется группа тегов{" "}
        <span className="text-blued">
          &lt;h1&gt;&lt;/h1&gt; ... &lt;h6&gt;&lt;/h6&gt;
        </span>
      </p>
      <p className="mb-14">Например:</p>
      <p className="mb-14 text-red-600">
        &lt;h1&gt;Заголовок первого уровня &lt;/h1&gt;
      </p>
      <p className="mb-14">
        А это — пример HTML-кода, с помощью которого можно создать целую
        страничку:
      </p>
      <Image
        src={img3}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-14 font-bold">Здесь можно увидеть несколько секций:</p>
      <ul className="mb-20">
        <li className="mb-14">
          <span className="text-blued"> &lt;html&gt;</span> — это тег, который
          оборачивает все остальные. Его использование говорит браузеру, что
          перед ним документ в html-разметке.
        </li>
        <li className="mb-14">
          <span className="text-blued"> &lt;head&gt;</span> — тег, внутри
          которого содержится метаинформация о странице, то есть такая
          информация, которая не отображается напрямую в документе. Например,
          <span className="text-blued"> &lt;titlel&gt;</span>— это заголовок
          вкладки браузера.
        </li>
        <li className="mb-14">
          <span className="text-blued"> &lt;body&gt;</span> — «тело» страницы.
          Внутри него как раз будет располагаться весь контент.
        </li>
        <li className="mb-14">
          <span className="text-blued"> &lt;h1&gt;</span> — заголовок страницы.
        </li>
        <li className="mb-14">
          <span className="text-blued"> &lt;p&gt;</span> — абзац с текстом.
        </li>
        <li className="mb-14">
          <span className="text-blued"> &lt;img&gt;</span> — картинка на
          странице.
        </li>
      </ul>
      <h2 className="mb-14 font-bold">С помощью HTML-тегов мы можем:</h2>
      <ul className="mb-20 block grid-cols-2 gap-14 xl:grid ">
        <li className="border-2 border-solid border-red-600 px-4 py-6">
          Форматировать текст: добавлять выделение курсивом, жирным шрифтом,
          подчеркивание, менять размер кегля, использовать
          нумерованные/маркированные списки.
        </li>
        <li className="border-2 border-solid border-red-600 px-4 py-6">
          Управлять текстовыми блоками: создавать заголовки различных уровней,
          абзацы, переносы на новую строку;
        </li>
        <li className="border-2 border-solid border-red-600 px-4 py-6">
          Управлять таблицами — создавать строки, столбцы и т. д.;
        </li>
        <li className="border-2 border-solid border-red-600 px-4 py-6">
          Вставлять объекты на страницу — изображения, видео, аудиофайлы и т.
          д.;
        </li>
        <li className="border-2 border-solid border-red-600 px-4 py-6">
          Важный функционал HTML, о котором стоит упомянуть отдельно, — это
          создание форм. Внутри формы можно ввести текст в поле, выбрать
          отдельный пункт из списка, а затем отправить эти данные на сервер.
        </li>
      </ul>

      <h2 className="mb-12 font-bold ">Пример кода на HTML:</h2>
      <Image
        src={img4}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <h2 className=" mb-14 font-bold text-blued  ">
        Что такое HTML на самом деле?
      </h2>
      <p className="mb-14">
        HTML не является языком программирования; это язык разметки, и
        используется, чтобы сообщать вашему браузеру, как отображать
        веб-страницы, которые вы посещаете. Он может быть сложным или простым, в
        зависимости от того, как хочет веб-дизайнер. HTML состоит из
        ряда элементов, которые вы используете, чтобы вкладывать или оборачивать
        различные части контента, чтобы заставить контент отображаться или
        действовать определённым образом. Ограждающие теги могут сделать слово
        или изображение ссылкой на что-то ещё, могут сделать слова курсивом,
        сделать шрифт больше или меньше и так далее. Например, возьмём следующую
        строку контента:
      </p>
      <p className="mb-16 rounded-[20px] bg-gree py-8 pl-8 text-left  text-white">
        Моя кошка очень раздражена
      </p>
      <p className="mb-12">
        Если бы мы хотели, чтобы строка стояла сама по себе, мы могли бы
        указать, что это абзац, заключая его в теги абзаца:
      </p>
      <Image
        src={img5}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <h2 className="mb-12 font-bold ">Анатомия HTML элемента</h2>
      <p className="mb-12 ">
        Давайте рассмотрим элемент абзаца более подробно.
      </p>
      <Image
        src={img6}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <h3 className="mb-12">Главными частями нашего элемента являются</h3>
      <ul className="mb-16 text-left text-base md:text-2xl xl:text-2xl">
        <li className="mb-10">
          <span className="text-red-600 ">
            1. Открывающий тег (Opening tag):{" "}
          </span>
          Главными частями нашего элемента являются: Открывающий тег (Opening
          tag): Состоит из имени элемента (в данном случае, "p"), заключённого в
          открывающие и закрывающие угловые скобки. Открывающий тег указывает,
          где элемент начинается или начинает действовать, в данном случае — где
          начинается абзац. Закрывающий тег (Closing tag): Это то же самое, что
          и открывающий тег, за исключением того, что он включает в себя косую
          черту перед именем элемента. Закрывающий элемент указывает, где
          элемент заканчивается, в данном случае — где заканчивается абзац.
          Отсутствие закрывающего тега является одной из наиболее
          распространённых ошибок начинающих и может приводить к странным
          результатам. Контент (Content): Это контент элемента, который в данном
          случае является просто текстом. Элемент(Element): Открывающий тег,
          закрывающий тег и контент вместе составляют элемент.
        </li>
        <li className="mb-10">
          <span className="text-red-600">
            2. Закрывающий тег (Closing tag):
          </span>{" "}
          Это то же самое, что и открывающий тег, за исключением того, что он
          включает в себя косую черту перед именем элемента. Закрывающий элемент
          указывает, где элемент заканчивается, в данном случае — где
          заканчивается абзац. Отсутствие закрывающего тега является одной из
          наиболее распространённых ошибок начинающих и может приводить к
          странным результатам.
        </li>
        <li className="mb-10">
          <span className="text-red-600">3. Контент (Content): </span>Это
          контент элемента, который в данном случае является просто текстом
        </li>
        <li className="mb-16">
          <span className="text-red-600">4. Элемент(Element): </span>{" "}
          Открывающий тег, закрывающий тег и контент вместе составляют элемент.
        </li>
      </ul>
      <h2 className="mb-12 font-bold">
        Элементы также могут иметь атрибуты, которые выглядят так:
      </h2>
      <Image
        src={img7}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-12 ">
        Атрибуты содержат дополнительную информацию об элементе, которую вы не
        хотите показывать в фактическом контенте. В данном случае, class
        это имя атрибута, а editor-note это значение атрибута. Класс позволяет
        дать элементу идентификационное имя, которое может позже использоваться,
        чтобы обращаться к элементу с информацией о стиле и прочих вещах.
      </p>
      <h3 className="mx-auto mb-10 w-full rounded-[20px] bg-red-600 py-4 text-white xl:w-[425px]">
        Атрибут всегда должен иметь:
      </h3>
      <ul>
        <li className="mb-14">
          1. Пробел между ним и именем элемента (или предыдущим атрибутом, если
          элемент уже имеет один или несколько атрибутов).
        </li>
        <li className="mb-14">
          2. Имя атрибута, за которым следует знак равенства.
        </li>
        <li className="mb-16">
          3. Значение атрибута, заключённое с двух сторон в кавычки.
        </li>
      </ul>
      <h2 className="mb-12 font-bold">Вложенные элементы</h2>
      <p className="mb-12 ">
        Вы также можете располагать элементы внутри других элементов — это
        называется вложением. Если мы хотим заявить, что наша
        кошка очень раздражена, мы можем заключить слово "очень" в элемент {" "}
        <span className="text-lime-600">&lt;strong&gt;</span>, который
        указывает, что слово должно быть сильно акцентированно:
      </p>
      <Image
        src={img8}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-12">
        Вы, однако, должны убедиться, что ваши элементы правильно вложены: в
        примере выше мы открыли первым элемент 
        <span className="text-lime-600">&lt;p&gt;</span>, затем элемент
        <span className="text-lime-600">&lt;strong&gt;</span>, потом мы должны
        закрыть сначала элемент  
        <span className="text-lime-600">&lt;strong&gt;</span>, затем
        <span className="text-lime-600">&lt;p&gt;</span>. Приведённое ниже
        неверно:
      </p>
      <Image
        src={img9}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-16">
        Элементы должны открываться и закрываться правильно, поэтому они явно
        располагаются внутри или снаружи друг друга. Если они перекрываются, как
        в примере выше, ваш веб-браузер будет пытаться сделать наилучшее
        предположение на основе того, что вы пытались сказать, что может
        привести к неожиданным результатам. Так что не стоит этого делать!
      </p>
      <h2 className="mb-12 font-bold">Пустые элементы</h2>
      <p className="mb-12 ">
        Некоторые элементы не имеют контента, и называются пустыми элементами.
        Возьмём элемент  <span className="text-lime-600">&lt;img&gt;</span>,
        который уже имеется в нашем HTML:
      </p>
      <Image
        src={img10}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-16 ">
        {" "}
        Он содержит два атрибута, но не имеет закрывающего тега {" "}
        <span className="text-lime-600">&lt;img&gt;</span>, и никакого
        внутреннего контента. Это потому, что элемент изображения не оборачивает
        контент для влияния на него. Его целью является вставка изображения в
        HTML страницу в нужном месте.
      </p>

      <h2 className="mb-12 font-bold">Анатомия HTML документа</h2>
      <p className="mb-12 ">
        Мы завершили изучение основ отдельных HTML элементов, но они не очень
        полезны сами по себе. Теперь мы посмотрим, как отдельные элементы
        объединяются в целую HTML страницу. Давайте вернёмся к коду, который мы
        записывали в наш index.html:
      </p>
      <Image
        src={img11}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <h3 className="mb-12 font-bold">Здесь мы имеем:</h3>
      <ul>
        <li className="mb-12 ">
          &lt;!DOCTYPE html&gt; — доктайп. В прошлом, когда HTML был молод
          (около 1991/1992), доктайпы должны были выступать в качестве ссылки на
          набор правил, которым HTML страница должна была следовать, чтобы
          считаться хорошим HTML, что могло означать автоматическую проверку
          ошибок и другие полезные вещи. Однако в наши дни, никто не заботится
          об этом, и они на самом деле просто исторический артефакт, который
          должен быть включён для того, что бы все работало правильно. На данный
          момент это все, что вам нужно знать.
        </li>
        <li className="mb-12 ">
          &lt;html&gt; &lt;/html&gt; — элемент &lt;html&gt;. Этот элемент
          оборачивает весь контент на всей странице, и иногда известен как
          корневой элемент.
        </li>
        <li className="mb-12 ">
          &lt;head&gt; &lt;/head&gt; — элемент &lt;head&gt;. Этот элемент
          выступает в качестве контейнера для всего, что вы пожелаете включить
          на HTML страницу, но не являющегося контентом, который вы показываете
          пользователям вашей страницы. К ним относятся такие вещи, как ключевые
          слова и описание страницы, которые будут появляться в результатах
          поиска, CSS стили нашего контента, кодировка и многое другое.
        </li>
        <li className="mb-12 ">
          &lt;body&gt; &lt;/body&gt; — элемент &lt;body&gt;. В нем
          содержится весь контент, который вы хотите показывать пользователям,
          когда они посещают вашу страницу, будь то текст, изображения, видео,
          игры, проигрываемые аудиодорожки или что-то ещё.
        </li>
        <li className="mb-12 ">
          &lt;meta charset="utf-8"&gt;— этот элемент устанавливает UTF-8
          кодировку вашего документа, которая включает в себя большинство
          символов из всех известных человечеству языков. По сути, теперь
          документ может обрабатывать любой текстовый контент, который вы в него
          вложите. Нет причин не устанавливать её, так как это может помочь
          избежать некоторых проблем в дальнейшем.
        </li>
        <li className="mb-16 ">
          {" "}
          &lt;title&gt; &lt;/title&gt; — элемент &lt;title&gt;Этот элемент
          устанавливает заголовок для вашей страницы, который является
          названием, появляющимся на вкладке браузера загружаемой страницы, и
          используется для описания страницы, когда вы добавляете её в
          закладки/избранное.
        </li>
      </ul>

      <h2 className="mb-12 font-bold">Изображения</h2>
      <p className="mb-12 ">
        Давайте снова обратим наше внимание на элемент изображения:
      </p>

      <Image
        src={img12}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />

      <p className="mb-12 ">
        Как было сказано раньше, код встраивает изображение на нужном месте. Это
        делается с помощью атрибута src (source, источник), который содержит
        путь к нашему файлу изображения.
      </p>
      <p className="mb-16">
        Мы также включили атрибут alt (alternative, альтернатива). В этом
        атрибуте вы указываете поясняющий текст для пользователей, которые не
        могут увидеть изображение, возможно, по следующим причинам:
      </p>
      <p className="mb-12">
        1. У них присутствуют нарушения зрения. Пользователи со значительным
        нарушением зрения часто используют инструменты, называемые Screen
        Readers (экранные дикторы), которые читают для них альтернативный текст.
      </p>
      <p className="mb-12">
        2. Что-то пошло не так, в результате чего изображение не отобразилось.
        Например, попробуйте намеренно изменить путь в вашем атрибуте src,
        сделав его неверным. Если вы сохраните и перезагрузите страницу, то вы
        должны увидеть что-то подобное вместо изображения:
      </p>

      <Image
        src={img13}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />

      <p className="mb-12 ">
        {" "}
        Альтернативный текст - это "пояснительный текст".Он должен предоставить
        читателю достаточно информации, чтобы иметь представление о том, что
        передаёт изображение.В этом примере наш текст "My test image"("Моё
        тестовое изображение") не годится.Намного лучшей альтернативой для
        нашего логотипа Firefox будет "The Firefox logo: a flaming fox
        surrounding the Earth"("Логотип Firefox: огненный Лис вокруг Земли").
      </p>
      <p className="mb-12 ">
        Сейчас попробуйте придумать более подходящий альтернативный текст для
        вашего изображения.
      </p>

      <h3 className="mx-auto mb-10 w-full rounded-[20px] bg-red-600 py-4 text-white xl:w-[425px]">
        Разметка текста
      </h3>
      <p className="mb-16 ">
        В этом разделе рассмотрим некоторые из основных HTML элементов, которые
        вы будете использовать для разметки текста.
      </p>
      <h2 className="mb-12 font-bold">Заголовки</h2>
      <p className="mb-16 ">
        Элементы заголовка позволяют вам указывать определённые части вашего
        контента в качестве заголовков или подзаголовков. Точно так же, как
        книга имеет название, названия глав и подзаголовков, HTML документ может
        содержать то же самое. HTML включает шесть уровней заголовков 
        <span className="text-lime-600">
          &lt;h1&gt;(en-US)–&lt;h6&gt; (en-US)
        </span>
        , хотя обычно вы будете использовать не более 3-4 :
      </p>
      <Image
        src={img14}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-16 ">
        Теперь попробуйте добавить подходящее название для вашей HTML страницы,
        чуть выше элемента <span className="text-lime-600">&lt;img&gt;</span>.
      </p>
      <h2 className="mb-12 font-bold">Абзацы</h2>
      <p className="mb-16 ">
        Как было сказано раньше, элемент 
        <span className="text-lime-600">&lt;p&gt;</span>предназначен для абзацев
        текста; вы будете использовать их регулярно при разметке текстового
        контента:
      </p>
      <Image
        src={img15}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-16 ">
        Добавьте свой образец текста в один или несколько абзацев, расположенных
        прямо под элементом  <span className="text-lime-600">&lt;img&gt;</span>
      </p>
      <h2 className="mb-12 font-bold">Cписки</h2>
      <p className="mb-16">
        Большая часть веб-контента является списками и HTML имеет специальные
        элементы для них. Разметка списка всегда состоит по меньшей мере из двух
        элементов. Наиболее распространёнными типами списков являются
        нумерованные и ненумерованные списки:
      </p>
      <ul className="mb-16">
        <li className="mb-12">
          <span className="font-bold">1. Ненумерованные списки</span> - это
          списки, где порядок пунктов не имеет значения, как в списке покупок.
          Они оборачиваются в элемент 
          <span className="text-lime-600">&lt;ul&gt;</span>.
        </li>
        <li>
          <span className="font-bold">2. Нумерованные списки</span> - это
          списки, где порядок пунктов имеет значение, как в рецепте. Они
          оборачиваются в элемент 
          <span className="text-lime-600">&lt;ol&gt;</span>.
        </li>
      </ul>
      <p className="mb-16">
         Каждый пункт внутри списков располагается внутри элемента 
        <span className="text-lime-600">&lt;li&gt;</span>(list item, элемент
        списка).
      </p>
      <p className="mb-16">
        Например, если мы хотим включить часть следующего фрагмента абзаца в
        список:
      </p>
      <Image
        src={img16}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-16">Мы могли бы изменить разметку на эту:</p>
      <Image
        src={img17}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-16">
        Попробуйте добавить упорядоченный или неупорядоченный список на свою
        страницу.
      </p>
      <h2 className="mb-16 font-bold">Ссылки</h2>
      <p className="mb-16">
        Ссылки очень важны — это то, что делает Интернет Интернетом. Чтобы
        добавить ссылку, нам нужно использовать простой элемент
        — &lt;a&gt; — a это сокращение от "anchor" ("якорь"). Чтобы текст в
        вашем абзаце стал ссылкой, выполните следующие действия:
      </p>
      <ol>
        <li className="mb-16">
          1. Выберите некоторый текст. Мы выбрали текст "Разработка".
        </li>
        <li className="mb-16">
          2. Оберните текст в элемент&lt;a&gt;, например так:
        </li>
        <Image
          src={img18}
          alt="foto"
          width={1082}
          height={559}
          className="mx-auto mb-14"
        />
        <li className="mb-16">
          3. Задайте элементу &lt;a&gt; атрибут href, например так:
        </li>
        <Image
          src={img19}
          alt="foto"
          width={1082}
          height={559}
          className="mx-auto mb-14"
        />
        <li className="mb-16">
          4. Заполните значение этого атрибута веб-адресом, на который вы хотите
          указать ссылку:
        </li>
        <Image
          src={img20}
          alt="foto"
          width={1082}
          height={559}
          className="mx-auto mb-14"
        />
      </ol>
      <p className="mb-16">
        Вы можете получить неожиданные результаты, если в самом начале
        веб-адреса вы опустите https:// или http:// часть,
        называемую протоколом. После создания ссылки, кликните по ней, чтобы
        убедиться, что она направляет вас туда, куда вы хотели.
      </p>
      <p className="mb-[100px]">
        Теперь добавьте ссылку на вашу страницу, если вы ещё не сделали этого.
      </p>
      <h2 className="mx-auto mb-16 w-full rounded-3xl bg-blue-600 py-4 text-base text-white md:text-4xl xl:w-[650px] xl:text-4xl">
        CSS (Cascading Style Sheets)
      </h2>
      <p className="mb-16">
        CSS — это язык стилей, используемый для описания внешнего вида
        веб-страницы. Он позволяет задавать различные стили для HTML-элементов,
        такие как цвет, размер шрифта, отступы и многое другое. CSS-стили можно
        применять к HTML-элементам с помощью селекторов.
      </p>

      <h3 className="mb-16 font-bold">CSS и стили</h3>
      <p className="mb-16 text-blue-600">
        {" "}
        CSS используется для определения стилей (правил) оформления документов —
        включая дизайн, вёрстку и вариации макета для различных устройств и
        размеров экрана.
      </p>
      <p className="mb-14 text-blue-600">
        {" "}
        У такого способа форматирования несколько достоинств:
      </p>
      <ul className="mb-16 rounded-lg bg-red-600 px-10 py-7 text-white">
        <li>- теги не дублируются;</li>
        <li>- документ проще обслуживать;</li>
        <li>
          - внешний вид всего сайта можно изменить централизованно, а не
          корректировать форматирование каждой странички.
        </li>
      </ul>
      <p className="mb-8 font-bold">
        Стили можно разметить внутри тега  &lt;HEAD&gt; или использовать
        отдельный CSS-файл.
      </p>
      <p className="mb-16 font-bold">
        Вот так можно прописать CSS в качестве атрибута непосредственно в HTML:
      </p>
      <Image
        src={img21}
        alt="foto"
        width={1082}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-16">
        {" "}
        А так CSS прописывается при помощи тега &lt;style&gt; и в теге
        &lt;head&gt; документа HTML.
      </p>
      <Image
        src={img22}
        alt="foto"
        width={582}
        height={559}
        className="mx-auto mb-14"
      />
      <p>
        Теперь разберёмся, что такое CSS-файл. Всё просто — это файл с
        расширением .css, где прописываются правила оформления документа. Чтобы
        привязать файл к оформлению страницы, нужно использовать
        тег&lt;link&gt;:
      </p>
      <Image
        src={img23}
        alt="foto"
        width={682}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-14">
        Современный способ оформления веб-документов вошёл в практику в 2011
        году. Это свойство CSS grid — теперь оно поддерживается практически
        всеми браузерами.
      </p>
      <p className="mb-14">
        И если раньше приходилось верстать документы с использованием элементов
        вроде &lt;div class=»container»&gt;, то сейчас всё это выполняется
        средствами CSS.
      </p>
      <p className="mb-16">
        После того как этот способ стал стандартом, проблема разделения
        содержания (HTML) и оформления (CSS) решилась раз и навсегда.
      </p>
      <h2 className="mb-16 font-bold">Синтаксис CSS</h2>
      <p className="mb-16">
        У языка CSS относительно простой синтаксис. Сначала прописывается
        селектор — он выбирает конкретный элемент на странице. Потом, после
        фигурных скобок, указываются свойства со значениями — между ними
        ставится двоеточие. Сами свойства отделяются друг от друга точкой с
        запятой.
      </p>
      <Image
        src={img24}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-12">
        Что такое селектор в CSS? Это конструкция, которая позволяет выбрать
        отдельные или однотипные элементы на странице, чтобы их стилизовать. С
        селектора начинается каждый блок объявлений в CSS:
      </p>
      <p className="mb-10 font-bold">.my-class - background - color: #999; </p>
      <p className="mb-16 font-bold">
        В качестве селектора в примере используется my-class. Все элементы с
        этим классом получают единое оформление — серый фон цвета #999.
      </p>
      <h2 className="mb-16 font-bold">Каскады в CSS</h2>
      <p className="mb-16">
        И всё-таки почему CSS — это именно Cascading Style Sheets? Дело в том,
        что в единую схему стили организуются при помощи каскада. Вот простой
        пример, который также поможет понять, что такое CSS-код и как он
        выглядит:
      </p>
      <Image
        src={img25}
        alt="foto"
        width={582}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-16">
        При помощи каскадов мы присвоили элементу p красный цвет. Зелёный цвет,
        указанный выше красного, учитываться не будет. Используется то значение
        параметра, которое указано ниже, и это помогает избежать конфликтов. При
        этом размер шрифта — 20 пикселей — не меняется.
      </p>
      <p className="mb-14">Если упростить написанное выше, то получится:</p>
      <Image
        src={img26}
        alt="foto"
        width={582}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-14">
        Кроме того, один элемент можно сделать зависимым от нескольких
        селекторов разного типа. Пример:
      </p>
      <Image
        src={img27}
        alt="foto"
        width={582}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-14">
        Чтобы использовать все параметры, в HTML указываем:
      </p>
      <Image
        src={img28}
        alt="foto"
        width={582}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-14">
        Здесь мы присвоили элементу следующие свойства: он красный, размером 20
        пикселей и написан курсивом. Важно, что в данном случае у разных
        селекторов — разный приоритет. Их порядок:
      </p>
      <ul className="text-red-600">
        <li className="mb-6">1. Селектор типа элемента (p).</li>
        <li className="mb-6">2. Селектор класса (.important).</li>
        <li className="mb-6">3. Селектор id (#intro).</li>
      </ul>
      <p className="mb-16 text-blue-600">1 — низкий приоритет, 3 — высокий.</p>
      <h2 className="mb-16 font-bold">Приоритеты в CSS</h2>
      <ul className="mb-16 rounded-lg bg-red-600 px-10 py-7 text-white">
        <li className="mb-12">
          Обговорим подробнее вопрос приоритетов. Их иерархия работает следующим
          образом:
        </li>
        <li className="mb-6">
          1. Самый высокий приоритет у свойств, в конце объявления которых
          указано !important.
        </li>
        <li className="mb-6">
          2. Затем идут инлайновые стили, которые прописываются в теге через
          атрибут style.
        </li>
        <li className="mb-6">
          3. Ещё ниже приоритет стилей, заданных в теге style в самом документе.
        </li>
        <li className="mb-16">
          4. Далее следуют стили, подключённые к документу как внешний CSS-файл
          с использованием тега &lt;link&gt;
        </li>
      </ul>
      <h2 className="mb-16 font-bold">Пример кода на CSS</h2>
      <Image
        src={img29}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-[150px]"
      />
      <h2 className="mx-auto mb-16 w-full rounded-3xl bg-amber-300 py-4 text-4xl text-white xl:w-[650px]">
        JavaScript
      </h2>
      <p className="mb-16">
        JavaScript — это язык программирования, который используется для
        добавления интерактивности, анимации и обработки пользовательских
        действий на веб-страницах. JavaScript можно встраивать в HTML-документы
        или подключать как отдельные файлы.
      </p>
      <ul className="mb-16 rounded-lg bg-blue-600 px-10 py-7 text-white">
        <li className="mb-12">
          JS — мультипарадигменный язык, так как он поддерживает разные
          парадигмы (стили) программирования и особенности:
        </li>
        <li className="mb-10">
          &bull; <span className="font-bold">Объектно-ориентированный</span> — в
          этом стиле программирования используют инструкции, которые выполняются
          последовательно, а для доступа к данным используются переменные,
          значение которых может быть переписано в ходе вычисления.
        </li>
        <li className="mb-10">
          &bull; <span className="font-bold">Императивный</span>— в этом стиле
          программирования используют инструкции, которые выполняются
          последовательно, а для доступа к данным используются переменные,
          значение которых может быть переписано в ходе вычисления.
        </li>

        <li className="mb-10">
          &bull; <span className="font-bold">Функциональный</span> — в нем
          вычисление основано на математических функциях. Так как функциональное
          программирование не опирается на переменные, которые могут менять
          значение, результаты запросов будут всегда одинаковыми.
        </li>
        <li className="mb-10">
          &bull; <span className="font-bold">Динамическая типизация:</span>
           Переменные в JavaScript не требуют объявления типа данных. Они могут
          изменять свой тип в процессе выполнения, что делает код более гибким,
          но также требует внимательного управления типами.
        </li>
        <li className="mb-10">
          &bull; <span className="font-bold">Обработка событий: </span>
           JavaScript является мощным инструментом для обработки событий на
          веб-страницах. Он может реагировать на действия пользователей, такие
          как клики мышью, нажатия клавиш и другие.
        </li>
        <li className="mb-10">
          &bull; <span className="font-bold">Манипуляция DOM:</span> JavaScript
          может изменять структуру и содержимое веб-страницы, обеспечивая
          динамическое обновление контента без перезагрузки страницы.
        </li>
        <li className="mb-10">
          &bull; <span className="font-bold">Асинхронные операции: </span>
           JavaScript позволяет выполнять асинхронные операции, такие как
          загрузка данных с сервера, без блокирования выполнения других задач.
        </li>
        <li className="mb-10">
          &bull; <span className="font-bold">Серверный JavaScript: </span>С
          помощью платформы Node.js JavaScript может быть использован на
          серверной стороне для создания высокопроизводительных и масштабируемых
          веб-приложений.
        </li>
        <li className="mb-10">
          &bull;{" "}
          <span className="font-bold">Множество фреймворков и библиотек:</span>
          JavaScript имеет обширное сообщество разработчиков и большое
          количество библиотек и фреймворков, таких как React, Angular, Vue.js,
          и другие, что упрощает создание сложных веб-приложений.
        </li>
        <li className="mb-10">
          &bull; <span className="font-bold">Кроссплатформенность: </span>
          JavaScript может быть использован для разработки веб-приложений на
          различных платформах, включая веб, мобильные устройства и даже
          десктоп.
        </li>
        <li className="mb-16">
          &bull; <span className="font-bold"> Открытый стандарт: </span>
          JavaScript базируется на открытых стандартах ECMAScript, что
          обеспечивает его интероперабельность и расширяемость.
        </li>

        <p>
          Веб-страницы частично обрабатываются с помощью JavaScript на
          компьютере пользователя. Это снижает нагрузку на сервер: часть
          операций выполняется без запросов к нему, что экономит время и трафик
        </p>
      </ul>
      <h2 className="mb-16 font-bold">Особенности JavaScript</h2>
      <p className="mb-6">
        JavaScript простыми словами называют языком скриптов или сценариев.
        Скрипты — это набор инструкций, которые выполняются при загрузке
        страницы. Браузер самостоятельно интерпретирует код на JavaScript, для
        этого даже не требуется компиляция (перевод языка программирования в
        машинный код).
      </p>
      <p className="mb-16">
        Скрипты можно прописать внутри кода страницы или подключить к HTML
        отдельным файлом. Например в стандартной разметке index.html JS-код
        прописывают внутри тега script, помещенного в тег body:
      </p>
      <Image
        src={img30}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-16"
      />
      <p className="mb-12">
        Тогда в браузере благодаря инструкции console.log появится слово
        «Привет!».
      </p>
      <Image
        src={img31}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-16"
      />
      <p className="mb-12">
        Но обычно для этого создается отдельный файл с расширением .js. Его
        называют script.js и прописывают код в нем:
      </p>
      <p className="mb-12 bg-slate-400 py-4">console.log(‘Hello world!’)</p>
      <Image
        src={img32}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-16"
      />
      <p className="mb-12">
        А в основном коде уже внутри тега script прописывают путь к этому файлу:
      </p>
      <Image
        src={img33}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-16"
      />
      <h2 className="mb-16 font-bold">Современная разметка</h2>
      <div className="mx-auto mb-28 w-full xl:w-[800px]">
        <p className="text-xl">
          Тег &lt;script&gt;имеет несколько атрибутов, которые редко
          используются, но всё ещё могут встретиться в старом коде:
        </p>

        <p className="text-xl"> Атрибут type: &lt;script type=…&gt; </p>

        <p className="text-xl">
          Старый стандарт HTML, HTML4, требовал наличия этого атрибута в теге 
          &lt;script&gt;. Обычно он имел значение type="text/javascript". На
          текущий момент этого больше не требуется. Более того, в современном
          стандарте HTML смысл этого атрибута полностью изменился. Теперь он
          может использоваться для JavaScript-модулей. Но это тема не для
          начального уровня, и о ней мы поговорим в другой части учебника.
          Атрибут language:{" "}
        </p>

        <p className="text-xl"> Атрибут language: &lt;script language=…&gt; </p>

        <p className="text-xl">
          {" "}
          Этот атрибут должен был задавать язык, на котором написан скрипт. Но
          так как JavaScript является языком по умолчанию, в этом атрибуте уже
          нет необходимости{" "}
        </p>

        <p className="text-xl"> Обёртывание скрипта в HTML-комментарии. </p>

        <p className="text-xl">
          {" "}
          В очень древних книгах и руководствах вы сможете найти комментарии
          внутри тега &lt;script&gt;, например, такие:
        </p>
      </div>
      <Image
        src={img34}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-16"
      />
      <p className="mb-20">
        Этот комментарий скрывал код JavaScript в старых браузерах, которые не
        знали, как обрабатывать тег &lt;script&gt;. Поскольку все браузеры,
        выпущенные за последние 15 лет, не содержат данной проблемы, такие
        комментарии уже не нужны. Если они есть, то это признак, что перед нами
        очень древний код.
      </p>
      <h2 className="mb-16 font-bold">Внешние скрипты</h2>
      <p className="mb-10">
        Если у вас много JavaScript-кода, вы можете поместить его в отдельный
        файл
      </p>
      <p className="mb-20">
        Файл скрипта можно подключить к HTML с помощью атрибута src:
      </p>
      <Image
        src={img35}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-16"
      />
      <p className="mx-auto w-full xl:w-[800px] ">
        Здесь /path/to/script.js – это абсолютный путь от корневой папки до
        необходимого файла. Корневой папкой может быть корень диска или корень
        сайта, в зависимости от условий работы сайта.
      </p>
      <p className="mb-16">
        Также можно указать относительный путь от текущей страницы.
        Например, src="script.js" или src="./script.js" будет означать, что
        файл "script.js" находится в текущей папке. Можно указать и полный
        URL-адрес. Например:
      </p>
      <Image
        src={img36}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-16"
      />
      <p className="mb-16">
        Для подключения нескольких скриптов используйте несколько тегов:
      </p>
      <Image
        src={img37}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-16"
      />

      <div className="mb-16 rounded-lg bg-gray-300 px-10 py-6 text-black">
        <h2 className="mb-10 font-bold">На заметку:</h2>
        <div className="mx-auto w-full xl:w-[900px]">
          <p>
            {" "}
            Как правило, только простейшие скрипты помещаются в HTML. Более
            сложные выделяются в отдельные файлы.
          </p>
          <p>
            {" "}
            Польза отдельных файлов в том, что браузер загрузит скрипт отдельно
            и сможет хранить его в кеше.
          </p>
          <p>
            {" "}
            Другие страницы, которые подключают тот же скрипт, смогут брать его
            из кеша вместо повторной загрузки из сети. И таким образом файл
            будет загружаться с сервера только один раз.
          </p>
          <p> Это сокращает расход трафика и ускоряет загрузку страниц.</p>
        </div>
      </div>
      <div className="mb-16 rounded-lg bg-gray-300 px-10 py-6 text-black">
        <h2 className="mb-20 font-bold">
          Если атрибут src установлен, содержимое тега script будет
          игнорироваться.
        </h2>
        <p className="mb-6">
          В одном теге&lt;script&gt; нельзя использовать одновременно
          атрибут src и код внутри
        </p>
        <p className="mb-10">Нижеприведённый пример не работает:</p>
        <Image
          src={img38}
          alt="foto"
          width={782}
          height={559}
          className="mx-auto mb-14"
        />
        <p className="mb-6">
          Нужно выбрать: либо внешний скрипт &lt;script src="…"&gt;, либо
          обычный код внутри тега&lt;script&gt;.
        </p>
        <p className="mb-10">
          Вышеприведённый пример можно разделить на два скрипта:
        </p>
        <Image
          src={img39}
          alt="foto"
          width={782}
          height={559}
          className="mx-auto mb-14"
        />
      </div>
      <h2 className="mb-16 font-bold">Итого</h2>
      <ul className="mb-20 text-left">
        <li>
          &bull; Для добавления кода JavaScript на страницу используется
          тег &lt;script&gt;
        </li>
        <li>&bull; Атрибуты type и language необязательны.</li>
        <li>
          &bull; Скрипт во внешнем файле можно вставить с помощью &lt;script
          src="path/to/script.js"&gt; &lt;/script&gt;
        </li>
      </ul>
      <h2 className="mx-auto mb-14 w-full rounded-3xl bg-blue-600 py-4 text-4xl text-white xl:w-[650px]">
        Структура кода
      </h2>
      <p className="mb-16">
        Начнём изучение языка с рассмотрения основных «строительных блоков»
        кода.
      </p>
      <h2 className="mb-16 font-bold">Инструкции</h2>
      <div className="mx-auto mb-24 w-full xl:w-[880px]">
        <p className="mb-4">
          Инструкции – это синтаксические конструкции и команды, которые
          выполняют действия.
        </p>
        <p className="mb-4">
          Мы уже видели инструкцию alert('Привет, мир!'), которая отображает
          сообщение «Привет, мир!».
        </p>
        <p className="mb-4">
          В нашем коде может быть столько инструкций, сколько мы захотим.
          Инструкции могут отделяться точкой с запятой.
        </p>
        <p className="mb-20">
          Например, здесь мы разделили сообщение «Привет Мир» на два вызова
          alert:
        </p>
      </div>
      <Image
        src={img40}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-14"
      />
      <p className="mb-16">
        Обычно каждую инструкцию пишут на новой строке, чтобы код было легче
        читать:
      </p>
      <Image
        src={img41}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-20"
      />
      <h2 className="mb-16 font-bold">Точка с запятой</h2>
      <p className="mb-2">
        В большинстве случаев точку с запятой можно не ставить, если есть
        переход на новую строку.
      </p>
      <p className="mb-16">Так тоже будет работать:</p>
      <Image
        src={img42}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-20"
      />
      <p className="mb-10">
        В этом случае JavaScript интерпретирует перенос строки как «неявную»
        точку с запятой. Это называется автоматическая вставка точки с запятой.
      </p>
      <h3 className="mb-12 font-bold">
        В большинстве случаев новая строка подразумевает точку с запятой. Но «в
        большинстве случаев» не значит «всегда»!
      </h3>
      <p className="mb-10">
        В некоторых ситуациях новая строка всё же не означает точку с запятой.
        Например:
      </p>
      <Image
        src={img43}
        alt="foto"
        width={782}
        height={559}
        className="mx-auto mb-20"
      />
      <p className="mb-10">
        Код выведет 6, потому что JavaScript не вставляет здесь точку с запятой.
        Интуитивно очевидно, что, если строка заканчивается знаком "+", значит,
        это «незавершённое выражение», поэтому точка с запятой не требуется. И в
        этом случае всё работает, как задумано.
      </p>
      <h3 className="mb-12 font-bold">
        {" "}
        Но есть ситуации, где JavaScript «забывает» вставить точку с запятой
        там, где она нужна
      </h3>
      <p className="mb-16">
        {" "}
        Ошибки, которые при этом появляются, достаточно сложно обнаруживать и
        исправлять.
      </p>
      <div className=" mx-auto mb-16 w-full rounded-lg border-2 border-black px-10 py-6 xl:w-[870px]">
        <h2 className="mb-16 font-bold">Пример с ошибкой</h2>
        <p className="mb-14">
          Если вы хотите увидеть конкретный пример такой ошибки, обратите
          внимание на этот код:
        </p>
        <Image
          src={img44}
          alt="foto"
          width={782}
          height={559}
          className="mx-auto mb-16"
        />
        <p className="mb-8">
          Пока нет необходимости знать значение скобок [] и forEach. Мы изучим
          их позже. Пока что просто запомните результат выполнения этого кода:
          выводится Hello, затем 1, затем 2.
        </p>
        <p className="mb-16">
          А теперь давайте уберем точку с запятой после alert:
        </p>
        <Image
          src={img45}
          alt="foto"
          width={782}
          height={559}
          className="mx-auto mb-16"
        />
        <p>
          Этот код отличается от кода, приведенного выше, только в одном:
          пропала точка с запятой в конце первой строки.
        </p>
        <p>
          Если мы запустим этот код, выведется только первый alert, а затем мы
          получим ошибку (вам может потребоваться открыть консоль, чтобы увидеть
          её)!
        </p>
        <p>
          Это потому что JavaScript не вставляет точку с запятой перед
          квадратными скобками[...]. И поэтому код в последнем примере
          выполняется, как одна инструкция.
        </p>
        <p className="mb-16">Вот как движок видит его:</p>
        <Image
          src={img46}
          alt="foto"
          width={782}
          height={559}
          className="mx-auto mb-16"
        />
        <p className="mb-6">
          Выглядит странно, правда? Такое слияние в данном случае неправильное.
          Мы должны поставить точку с запятой после alert, чтобы код работал
          правильно.
        </p>
        <p>Это может произойти и в некоторых других ситуациях.</p>
      </div>
      <h2 className="mb-16 font-bold">Комментарии</h2>
      <div className="mx-auto  mb-16 w-full xl:w-[870px]">
        <p className="mb-2">
          Со временем программы становятся всё сложнее и сложнее. Возникает
          необходимость добавлять комментарии, которые бы описывали, что делает
          код и почему.
        </p>
        <p className="mb-2">
          Комментарии могут находиться в любом месте скрипта. Они не влияют на
          его выполнение, поскольку движок просто игнорирует их.
        </p>
        <p className="mb-2">
          Однострочные комментарии начинаются с двойной косой черты //.
        </p>
        <p className="mb-2">
          Часть строки после // считается комментарием. Такой комментарий может
          как занимать строку целиком, так и находиться после инструкции. Как
          здесь:
        </p>
        <Image
          src={img47}
          alt="foto"
          width={782}
          height={559}
          className="mx-auto mb-16"
        />
        <p className="mb-4">
          Многострочные комментарии начинаются косой чертой со звёздочкой /* и
          заканчиваются звёздочкой с косой чертой */.
        </p>
        <p className="mb-10"> Как вот здесь:</p>
        <Image
          src={img48}
          alt="foto"
          width={782}
          height={559}
          className="mx-auto mb-16"
        />
        <p className="mb-4">
          Содержимое комментария игнорируется, поэтому, если мы поместим код
          внутри /* … */, он не будет исполняться.
        </p>
        <p className="mb-10">
          {" "}
          Это бывает удобно для временного отключения участка кода:
        </p>
        <Image
          src={img49}
          alt="foto"
          width={782}
          height={559}
          className="mx-auto mb-16"
        />
      </div>
      <div className=" mx-auto mb-16 w-full rounded-lg border-2 border-black px-10 py-6 xl:w-[870px]">
        <h2 className="mb-16 font-bold">Используйте горячие клавиши!</h2>
        <p className="mb-14">
          В большинстве редакторов строку кода можно закомментировать, нажав
          комбинацию клавиш Ctrl+/ для однострочного комментария и что-то
          вроде Ctrl+Shift+/ – для многострочных комментариев (выделите кусок
          кода и нажмите комбинацию клавиш).
        </p>

        <p className="mb-16 font-bold">
          Вложенные комментарии не поддерживаются!.
        </p>
        <p className="mb-4">Не может быть /*...*/ внутри /*...*/.</p>
        <p className="mb-12">Такой код «умрёт» с ошибкой:</p>
        <Image
          src={img50}
          alt="foto"
          width={782}
          height={559}
          className="mx-auto mb-16"
        />
      </div>
      <p className=" mx-auto mb-60 w-full xl:w-[870px]">
        Не стесняйтесь использовать комментарии в своём коде. Комментарии
        увеличивают размер кода, но это не проблема. Есть множество
        инструментов, которые минифицируют код перед публикацией на рабочий
        сервер. Они убирают комментарии, так что они не содержатся в рабочих
        скриптах. Таким образом, комментарии никоим образом не вредят рабочему
        коду.
      </p>
    </section>
  );
};

export default Conspect;
